import { Injectable, HttpException, HttpStatus } from '@nestjs/common';
import * as PDFDocument from 'pdfkit';
import * as fs from 'fs';
import { CreateUserDto } from './dto/citizen.dto';
import * as path from 'path';
import { uploadImages, uploadPdf } from 'src/config/cloudinary.config';

@Injectable()
export class DocService {
  async generatePDF(user: CreateUserDto, file: Express.Multer.File): Promise<string> {
    try {
      // Generate PDF
      const doc =await new PDFDocument({ size: 'A4', margin: 50 });

      const pdfFileName = `citizenship_card_${user.name.replace(/\s+/g, '_')}.pdf`;
      // Use process.cwd() to ensure the uploads path points to the project root
      const filePath = path.join(process.cwd(), 'uploads', pdfFileName);
      console.log(filePath); // This will log the path to the console

      // Create uploads directory if it doesn't exist
      const uploadDir = path.join(process.cwd(), 'uploads');
      if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
      }

      // Header
      await doc.rect(0, 0, doc.page.width, 100).fill('#4A90E2'); // Change the color as needed
      await doc.fontSize(30).fillColor('white').text('Citizenship Card', { align: 'center' });

      // Move down for spacing after the header
      await doc.moveDown(2);

      // Center the photo if it exists
      const uploadUrls = await uploadImages(file);
      if (uploadUrls[0]) {
        const imageWidth = 100; // Define image width
        const x = (doc.page.width - imageWidth) / 2; // Centering logic for x coordinate
       await doc.image(uploadUrls[0], {
          fit: [imageWidth, imageWidth],
          align: 'center',
          valign: 'center',
          x: x,
          y: doc.y, // Maintain the y position after the header
        });
      }

     await  doc.fillColor('black').fontSize(16);
      // User Information Section
     await  doc.text(`Name: ${user.name}`);
     await  doc.text(`Age: ${user.age}`);
     await  doc.text(`Place of Birth: ${user.placeOfBirth}`);
     await  doc.text(`Date of Birth: ${user.dob}`);
     await  doc.text(`Address: ${user.address}`);
     await  doc.text(`Father's Name: ${user.fatherName}`);
    await   doc.text(`Mother's Name: ${user.motherName}`);
     await  doc.text(`Contact: ${user.contact}`);

      await doc.moveDown(2);
     await  doc.fontSize(10).text('Generated by NepSewa', { align: 'center' });

      // Write PDF to file
      const writeStream =await fs.createWriteStream(filePath);
      await doc.pipe(writeStream);
      await doc.end();

      // Wait for the PDF to be written
      await new Promise((resolve, reject) => {
        writeStream.on('finish', resolve);
        writeStream.on('error', reject);
      });

      // Upload the generated PDF to Cloudinary
      const pdfStream = fs.createReadStream(filePath);
      const pdfUploadUrl = await uploadPdf(pdfStream);
      console.log(pdfUploadUrl);

      // Remove the local PDF file after uploading
      await  fs.unlinkSync(filePath);

      return pdfUploadUrl; // Return the URL of the uploaded PDF
    } catch (error) {
      console.error('Error generating PDF:', error);
      throw new HttpException('Failed to generate citizenship document', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
}
